/*
 * Copyright 2013 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'java'

jar.archiveBaseName.set('dashclock-api')
group = 'com.google.android.apps.dashclock'
version = '2.3.0'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

Properties props = new Properties()
props.load(new FileInputStream(file('../local.properties')))

def android = [
        sdk: props["sdk.dir"],
        target: 'android-28'
]

allprojects { ext."signing.keyId" = props["signing.keyId"] }
allprojects { ext."signing.password" = props["signing.password"] }
allprojects { ext."signing.secretKeyRingFile" = props["signing.secretKeyRingFile"] }


task compileAidl {
    FileTree aidls = fileTree('src/main/aidl').include('**/I*.aidl')
    aidls.each {File aidl ->
        def shell = ["${android.sdk}/build-tools/${rootProject.ext.buildToolsVersion}/aidl",
                "-p${android.sdk}/platforms/${android.target}/framework.aidl",
                "-I${file('src/main/aidl')}",
                "-o${file('build-aidl')}",
                "${aidl.absolutePath}"]
        def proc = shell.execute()
        proc.in.eachLine {line -> println line}
        proc.err.eachLine {line -> println 'stderr: ' + line}
        proc.waitFor()
    }
}

compileJava.dependsOn(compileAidl)

sourceSets {
    main.java.srcDirs += 'build-aidl'
}

clean {
    delete 'build-aidl'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    archiveBaseName.set(jar.archiveBaseName)
    from sourceSets.main.allSource
    from fileTree('src/main/aidl').include('**/I*.aidl')
}

artifacts {
    archives jar
    archives sourcesJar
}

dependencies {
    implementation files("${android.sdk}/platforms/${android.target}/android.jar")
}

signing {
    sign configurations.archives
}
